The "2-matrix_divided.py" module
==================================
This module contains only one function: matrix_divided. Error in project formatting scheme advances file numbering +1 for every task after 0.

Using "matrix_divided"
------------------------

First import
~~~~~~~~~~~
First import ``matrix_divided`` from the ``2-matrix_divided`` module. Since the file name contains a numeral, you can't use the simple ``from 2-matrix_divided import matrix_divided``. You can instead use the following syntax:

>>> matrix_divided = __import__('2-matrix_divided').matrix_divided

 
Normal use
~~~~~~~~~
Now matrix_divided can be used to divide all the elements of a matrix by an int or float. The quotients in the new matrix are rounded to the nearest second decimal place:

>>> matrix = [[2, 1, 3], [5, 4, 7]]
>>> print(matrix_divided(matrix, 3))
[[0.67, 0.33, 1.0], [1.67, 1.33, 2.33]]


The function can take floating point values as well as integers, but the quotients will still be rounded to 2 decimal places:

>>> matrix = [[2.2, 1.0, 3.4], [5.0, 4.5, 7.0]]
>>> print(matrix_divided(matrix, 3))
[[0.73, 0.33, 1.13], [1.67, 1.5, 2.33]]


Exceptions
~~~~~~~~~
``matrix`` must be a list, comprised of lists, themselves comprised of int or float type values; otherwise a TypeError is raised with the message ``matrix must be a matrix (list of lists) of integers/floats``. An empty list simply produces no output. The second-dimension lists in matrix should also be all of the same length, to avoid TypeError of ``Each row of the matrix must have the same size``:

matrix not a list:
>>> matrix = (2, 1, 3)
>>> matrix_divided(matrix, 3)
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats


empty list is okay:
>>> matrix = []
>>> matrix_divided(matrix, 3)
[]

>>> matrix = [2, 1, 3]
>>> matrix_divided(matrix, 3)
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats
 


Empty lists as matrix elements are permissible, provided that all sublists are devoid of elements    >>> matrix = [ [], [], [] ]
>>> matrix = [ [], [], [] ]
>>> matrix_divided(matrix, 3)
[[], [], []]


Sublists within the matrix should only contain integers or floats; any non-int or non-float elements are not allowed
>>> matrix = [[2, 1, 3], [5, 4, ()]]
>>> matrix_divided(matrix, 3)
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats

>>> matrix = [[2, 1, 3], [5, 4, 7, 9]]
>>> matrix_divided(matrix, 3)
Traceback (most recent call last):
...
TypeError: Each row of the matrix must have the same size


Similarly, the divisor (div) must be of type int or float to prevent a TypeError stating 'div must be a number,' and it should not be zero to prevent a ZeroDivisionError indicating 'division by zero.
>>> matrix = [[2, 1, 3], [5, 4, 7]]
>>> matrix_divided(matrix, '3')
Traceback (most recent call last):
...
TypeError: div must be a number
 

divisor is 0:
>>> matrix_divided(matrix, 0)
Traceback (most recent call last):
...
ZeroDivisionError: division by zero

