The "1-my_list" module
======================

Using "Using"
------------

Import function from module:
>>> My_List = __import__('1-my_list').MyList

Normal use:
>>> my_list = MyList()
>>> type(my_list) == MyList
True

Correct Instance test:
>>> my_list = MyList()
>>> isinstance(my_list, list)
True

print_sorted method is an instance method:
>>> type(MyList.__dict__['print_sorted'])
<class 'function'>

print_sorted method called via class with no args:
>>> my_list.__class__.print_sorted()
Traceback (most recent call last):
...
TypeError: print_sorted() missing 1 required positional argument: 'self'

print_sorted method called with 1 arg:
>>> my_list.print_sorted([4, 2, 5])
Traceback (most recent call last):
...
TypeError: print_sorted() takes 1 positional argument but 2 were given

print_sorted method called with 2 args:
>>> my_list.print_sorted([4, 2, 5], 1)
Traceback (most recent call last):
...
TypeError: print_sorted() takes 1 positional argument but 3 were given


Empty list test:
>>> my_list.print_sorted()
[]


Normal list test:
>>> my_listprint_sorted()
>>> my_list.print_sorted()
[1, 2, 3, 4, 5]


Negative ints list test:
>>> my_list = MyList([-5000, -98, 0, -9552565, -510, -2842004, -27])
>>> my_list.print_sorted()
[-9552565, -2842004, -5000, -510, -98, -27, 0]

Original list unchanged:
>>> my_list =  MyList([2, 10, -10, 1, 30, 200, 0])
>>> my_list.print_sorted()
[-10, 0, 1, 2, 10, 30, 200]
>>> my_list
[2, 10, -10, 1, 30, 200, 0]

List already in order:
>>> my_list = MyList([-35, 0, 1, 2, 5, 30, 200])
>>> my_list.print_sorted()
[-35, 0, 1, 2, 5, 30, 200]

Test append:
>>> my_list = MyList()
>>> my_list.append(12)
>>> my_list
[12]
